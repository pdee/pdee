;;; python-components-up-down.el -- Searching up/downwards in buffer -*- lexical-binding: t; -*- 

;; Copyright (C) 2015-2018 Andreas Röhler

;; Author: Andreas Röhler <andreas.roehler@online.de>
;; Keywords: languages, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:


(defun py-up-statement ()
  "go to the beginning of next statement upwards in buffer.

Return position if statement found, nil otherwise."
  (interactive)
  (let (erg)
    (if (py--beginning-of-statement-p)
	(setq erg (py-backward-statement))
      (setq erg (and (py-backward-statement) (py-backward-statement))))
    (when (and py-verbose-p (called-interactively-p 'interactive)) (message "%s" erg))
    erg))

(defun py-down-statement ()
  "Go to the beginning of next statement downwards in buffer.

Corresponds to backward-up-list in Elisp
Return position if statement found, nil otherwise."
  (interactive)
  (let* ((orig (point))
	 erg)
    (cond ((py--end-of-statement-p)
	   (setq erg
		 (and
		  (py-forward-statement)
		  (py-backward-statement)
		  (< orig (point))
		  (point))))
	  ((ignore-errors (< orig (ignore-errors (and (py-forward-statement) (py-backward-statement)))))
	   (setq erg (point)))
	  (t (setq erg (ignore-errors (< orig (and (py-forward-statement) (py-forward-statement)(py-backward-statement)))))))
    (when (and py-verbose-p (called-interactively-p 'interactive)) (message "%s" erg))
    erg))

(defalias 'py-block-up 'py-up-block)
(defun py-up-block (&optional indent)
  "Go to the beginning of next block upwards in buffer according to INDENT.
Optional INDENT
Return position if block found, nil otherwise."
  (interactive)
  (py-up-base 'py-block-re indent))

(defalias 'py-class-up 'py-up-class)
(defun py-up-class (&optional indent)
  "Go to the beginning of next class upwards in buffer according to INDENT.
Optional INDENT
Return position if class found, nil otherwise."
  (interactive)
  (py-up-base 'py-class-re indent))

(defalias 'py-clause-up 'py-up-clause)
(defun py-up-clause (&optional indent)
  "Go to the beginning of next clause upwards in buffer according to INDENT.
Optional INDENT
Return position if clause found, nil otherwise."
  (interactive)
  (py-up-base 'py-clause-re indent))

(defalias 'py-block-or-clause-up 'py-up-block-or-clause)
(defun py-up-block-or-clause (&optional indent)
  "Go to the beginning of next block-or-clause upwards in buffer according to INDENT.
Optional INDENT
Return position if block-or-clause found, nil otherwise."
  (interactive)
  (py-up-base 'py-block-or-clause-re indent))

(defalias 'py-def-up 'py-up-def)
(defun py-up-def (&optional indent)
  "Go to the beginning of next def upwards in buffer according to INDENT.
Optional INDENT
Return position if def found, nil otherwise."
  (interactive)
  (py-up-base 'py-def-re indent))

(defalias 'py-def-or-class-up 'py-up-def-or-class)
(defun py-up-def-or-class (&optional indent)
  "Go to the beginning of next def-or-class upwards in buffer according to INDENT.
Optional INDENT
Return position if def-or-class found, nil otherwise."
  (interactive)
  (py-up-base 'py-def-or-class-re indent))

(defalias 'py-minor-block-up 'py-up-minor-block)
(defun py-up-minor-block (&optional indent)
  "Go to the beginning of next minor-block upwards in buffer according to INDENT.
Optional INDENT
Return position if minor-block found, nil otherwise."
  (interactive)
  (py-up-base 'py-minor-block-re indent))

(defalias 'py-block-down 'py-down-block)
(defun py-down-block (&optional indent)
  "Go to the beginning of next block below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if block found, nil otherwise."
  (interactive)
  (py-down-base 'py-block-re  indent))

(defalias 'py-class-down 'py-down-class)
(defun py-down-class (&optional indent)
  "Go to the beginning of next class below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if class found, nil otherwise."
  (interactive)
  (py-down-base 'py-class-re  indent))

(defalias 'py-clause-down 'py-down-clause)
(defun py-down-clause (&optional indent)
  "Go to the beginning of next clause below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if clause found, nil otherwise."
  (interactive)
  (py-down-base 'py-clause-re  indent))

(defalias 'py-block-or-clause-down 'py-down-block-or-clause)
(defun py-down-block-or-clause (&optional indent)
  "Go to the beginning of next block-or-clause below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if block-or-clause found, nil otherwise."
  (interactive)
  (py-down-base 'py-block-or-clause-re  indent))

(defalias 'py-def-down 'py-down-def)
(defun py-down-def (&optional indent)
  "Go to the beginning of next def below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if def found, nil otherwise."
  (interactive)
  (py-down-base 'py-def-re  indent))

(defalias 'py-def-or-class-down 'py-down-def-or-class)
(defun py-down-def-or-class (&optional indent)
  "Go to the beginning of next def-or-class below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if def-or-class found, nil otherwise."
  (interactive)
  (py-down-base 'py-def-or-class-re  indent))

(defalias 'py-minor-block-down 'py-down-minor-block)
(defun py-down-minor-block (&optional indent)
  "Go to the beginning of next minor-block below in buffer according to INDENT.

Optional INDENT: honor indentation
Return position if minor-block found, nil otherwise."
  (interactive)
  (py-down-base 'py-minor-block-re  indent))

(defun py-up-block-bol (&optional indent)
  "Go to the beginning of next block upwards in buffer according to INDENT.

Go to beginning of line.
Return position if block found, nil otherwise."
  (interactive)
  (py-up-base 'py-block-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-class-bol (&optional indent)
  "Go to the beginning of next class upwards in buffer according to INDENT.

Go to beginning of line.
Return position if class found, nil otherwise."
  (interactive)
  (py-up-base 'py-class-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-clause-bol (&optional indent)
  "Go to the beginning of next clause upwards in buffer according to INDENT.

Go to beginning of line.
Return position if clause found, nil otherwise."
  (interactive)
  (py-up-base 'py-clause-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-block-or-clause-bol (&optional indent)
  "Go to the beginning of next block-or-clause upwards in buffer according to INDENT.

Go to beginning of line.
Return position if block-or-clause found, nil otherwise."
  (interactive)
  (py-up-base 'py-block-or-clause-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-def-bol (&optional indent)
  "Go to the beginning of next def upwards in buffer according to INDENT.

Go to beginning of line.
Return position if def found, nil otherwise."
  (interactive)
  (py-up-base 'py-def-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-def-or-class-bol (&optional indent)
  "Go to the beginning of next def-or-class upwards in buffer according to INDENT.

Go to beginning of line.
Return position if def-or-class found, nil otherwise."
  (interactive)
  (py-up-base 'py-def-or-class-re indent)
  (progn (beginning-of-line)(point)))

(defun py-up-minor-block-bol (&optional indent)
  "Go to the beginning of next minor-block upwards in buffer according to INDENT.

Go to beginning of line.
Return position if minor-block found, nil otherwise."
  (interactive)
  (py-up-base 'py-minor-block-re indent)
  (progn (beginning-of-line)(point)))

(defun py-down-block-bol (&optional indent)
  "Go to the beginning of next block below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if block found, nil otherwise "
  (interactive)
  (py-down-base 'py-block-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-class-bol (&optional indent)
  "Go to the beginning of next class below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if class found, nil otherwise "
  (interactive)
  (py-down-base 'py-class-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-clause-bol (&optional indent)
  "Go to the beginning of next clause below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if clause found, nil otherwise "
  (interactive)
  (py-down-base 'py-clause-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-block-or-clause-bol (&optional indent)
  "Go to the beginning of next block-or-clause below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if block-or-clause found, nil otherwise "
  (interactive)
  (py-down-base 'py-block-or-clause-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-def-bol (&optional indent)
  "Go to the beginning of next def below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if def found, nil otherwise "
  (interactive)
  (py-down-base 'py-def-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-def-or-class-bol (&optional indent)
  "Go to the beginning of next def-or-class below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if def-or-class found, nil otherwise "
  (interactive)
  (py-down-base 'py-def-or-class-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-minor-block-bol (&optional indent)
  "Go to the beginning of next minor-block below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if minor-block found, nil otherwise "
  (interactive)
  (py-down-base 'py-minor-block-re indent t)
  (progn (beginning-of-line)(point)))

;; python-components-up-down.el ends here
(provide 'python-components-up-down)
