;;; python-components-forms.el -- Forms start/end at beginning of line

;; Copyright (C) 2015  Andreas Roehler
;; Author: Andreas Roehler <andreas.roehler@online.de>
;; Keywords: languages, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:

;; Beginning of line forms
(defun py--mark-base (form &optional py-mark-decorators)
  (let* ((begform (intern-soft (concat "py-backward-" form)))
         (endform (intern-soft (concat "py-forward-" form)))
         (begcheckform (intern-soft (concat "py-beginning-of-" form "-p")))
         (orig (point))
         beg end erg)
    (setq beg (if
                  (setq beg (funcall begcheckform))
                  beg
                (funcall begform)))
    (when py-mark-decorators
      (save-excursion
        (when (setq erg (py-backward-decorator))
          (setq beg erg))))
    (setq end (funcall endform))
    (push-mark beg t t)
    (unless end (when (< beg (point))
                  (setq end (point))))
    (when (interactive-p) (message "%s %s" beg end))
    (cons beg end)))

(defun py-beginning-of-block-p ()
  "Returns position, if cursor is at the beginning of a block, nil otherwise. "
  (when (and (looking-at py-block-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-block (&optional indent)
  "Goto beginning of line where block starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-block-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-block-re (interactive-p) indent)))

(defun py-forward-block (&optional indent)
  "Go to end of block.

Returns end of block if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-block-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-block-bol ()
  "Goto beginning of line following end of block.
  Returns position reached, if successful, nil otherwise.

See also `py-down-block': down from current definition to next beginning of block below. "
  (interactive)
  (let ((erg (py-forward-block)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-block-or-clause-p ()
  "Returns position, if cursor is at the beginning of a block-or-clause, nil otherwise. "
  (when (and (looking-at py-block-or-clause-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-block-or-clause (&optional indent)
  "Goto beginning of line where block-or-clause starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-block-or-clause-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-block-or-clause-re (interactive-p) indent)))

(defun py-forward-block-or-clause (&optional indent)
  "Go to end of block-or-clause.

Returns end of block-or-clause if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-block-or-clause-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-block-or-clause-bol ()
  "Goto beginning of line following end of block-or-clause.
  Returns position reached, if successful, nil otherwise.

See also `py-down-block-or-clause': down from current definition to next beginning of block-or-clause below. "
  (interactive)
  (let ((erg (py-forward-block-or-clause)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-class-p ()
  "Returns position, if cursor is at the beginning of a class, nil otherwise. "
  (when (and (looking-at py-class-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-class (&optional indent)
  "Goto beginning of line where class starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-class-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-class-re (interactive-p) indent)))

(defun py-forward-class (&optional indent)
  "Go to end of class.

Returns end of class if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-class-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-class-bol ()
  "Goto beginning of line following end of class.
  Returns position reached, if successful, nil otherwise.

See also `py-down-class': down from current definition to next beginning of class below. "
  (interactive)
  (let ((erg (py-forward-class)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-mark-class ()
  "Mark class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py--mark-base "class"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-class ()
  "Mark class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py--mark-base "class")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-class ()
  "Delete class  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-class ()
  "Delete class  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (delete-region (car erg) (cdr erg))))

(defun py-beginning-of-clause-p ()
  "Returns position, if cursor is at the beginning of a clause, nil otherwise. "
  (when (and (looking-at py-clause-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-clause (&optional indent)
  "Goto beginning of line where clause starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-clause-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-clause-re (interactive-p) indent)))

(defun py-forward-clause (&optional indent)
  "Go to end of clause.

Returns end of clause if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-clause-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-clause-bol ()
  "Goto beginning of line following end of clause.
  Returns position reached, if successful, nil otherwise.

See also `py-down-clause': down from current definition to next beginning of clause below. "
  (interactive)
  (let ((erg (py-forward-clause)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-def-p ()
  "Returns position, if cursor is at the beginning of a def, nil otherwise. "
  (when (and (looking-at py-def-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-def (&optional indent)
  "Goto beginning of line where def starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-def-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-def-re (interactive-p) indent)))

(defun py-forward-def (&optional indent)
  "Go to end of def.

Returns end of def if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-def-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-def-bol ()
  "Goto beginning of line following end of def.
  Returns position reached, if successful, nil otherwise.

See also `py-down-def': down from current definition to next beginning of def below. "
  (interactive)
  (let ((erg (py-forward-def)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-mark-def ()
  "Mark def at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py--mark-base "def"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-def ()
  "Mark def at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py--mark-base "def")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-def ()
  "Delete def  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-def ()
  "Delete def  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (delete-region (car erg) (cdr erg))))

(defun py-beginning-of-def-or-class-p ()
  "Returns position, if cursor is at the beginning of a def-or-class, nil otherwise. "
  (when (and (looking-at py-def-or-class-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-def-or-class (&optional indent)
  "Goto beginning of line where def-or-class starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-def-or-class-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-def-or-class-re (interactive-p) indent)))

(defun py-forward-def-or-class (&optional indent)
  "Go to end of def-or-class.

Returns end of def-or-class if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-def-or-class-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-def-or-class-bol ()
  "Goto beginning of line following end of def-or-class.
  Returns position reached, if successful, nil otherwise.

See also `py-down-def-or-class': down from current definition to next beginning of def-or-class below. "
  (interactive)
  (let ((erg (py-forward-def-or-class)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-mark-def-or-class ()
  "Mark def-or-class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py--mark-base "def-or-class"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-def-or-class ()
  "Mark def-or-class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py--mark-base "def-or-class")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-def-or-class ()
  "Delete def-or-class  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-def-or-class ()
  "Delete def-or-class  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py--mark-base "ele")))
    (delete-region (car erg) (cdr erg))))

(defun py-beginning-of-minor-block-p ()
  "Returns position, if cursor is at the beginning of a minor-block, nil otherwise. "
  (when (and (looking-at py-minor-block-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-minor-block (&optional indent)
  "Goto beginning of line where minor-block starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-minor-block-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-minor-block-re (interactive-p) indent)))

(defun py-forward-minor-block (&optional indent)
  "Go to end of minor-block.

Returns end of minor-block if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-minor-block-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-minor-block-bol ()
  "Goto beginning of line following end of minor-block.
  Returns position reached, if successful, nil otherwise.

See also `py-down-minor-block': down from current definition to next beginning of minor-block below. "
  (interactive)
  (let ((erg (py-forward-minor-block)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-section-p ()
  "Returns position, if cursor is at the beginning of a section, nil otherwise. "
  (when (and (looking-at py-section-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-section (&optional indent)
  "Goto beginning of line where section starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-section-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-section-re (interactive-p) indent)))

(defun py-forward-section (&optional indent)
  "Go to end of section.

Returns end of section if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-section-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-section-bol ()
  "Goto beginning of line following end of section.
  Returns position reached, if successful, nil otherwise.

See also `py-down-section': down from current definition to next beginning of section below. "
  (interactive)
  (let ((erg (py-forward-section)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-statement-p ()
  "Returns position, if cursor is at the beginning of a statement, nil otherwise. "
  (when (and (looking-at py-statement-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-statement (&optional indent)
  "Goto beginning of line where statement starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-statement-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-statement-re (interactive-p) indent)))

(defun py-forward-statement (&optional indent)
  "Go to end of statement.

Returns end of statement if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-statement-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-statement-bol ()
  "Goto beginning of line following end of statement.
  Returns position reached, if successful, nil otherwise.

See also `py-down-statement': down from current definition to next beginning of statement below. "
  (interactive)
  (let ((erg (py-forward-statement)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

(defun py-beginning-of-top-level-p ()
  "Returns position, if cursor is at the beginning of a top-level, nil otherwise. "
  (when (and (looking-at py-top-level-re)
             (not (py-in-string-or-comment-p)))
    (point)))

(defun py-backward-top-level (&optional indent)
  "Goto beginning of line where top-level starts.
  Returns position reached, if successful, nil otherwise."
  (interactive)
  (let ((indent (and (looking-at py-top-level-re)
                     (current-indentation))))
    (py--beginning-of-form-intern py-top-level-re (interactive-p) indent)))

(defun py-forward-top-level (&optional indent)
  "Go to end of top-level.

Returns end of top-level if successful, nil otherwise"
  (interactive "P")
  (let* ((orig (point))
         (erg (py--end-base 'py-top-level-re orig)))
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-forward-top-level-bol ()
  "Goto beginning of line following end of top-level.
  Returns position reached, if successful, nil otherwise.

See also `py-down-top-level': down from current definition to next beginning of top-level below. "
  (interactive)
  (let ((erg (py-forward-top-level)))
    (when erg
      (unless (eobp)
        (forward-line 1)
        (beginning-of-line)
        (setq erg (point))))
  (when (interactive-p) (message "%s" erg))
  erg))

;; python-components-forms.el ends here
(provide 'python-components-forms)
