;;; python-components-forms-code.el --- Return Python forms' code -*- lexical-binding: t; -*-

;;This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;; URL: https://gitlab.com/python-mode-devs
;; Keywords: languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:

(defun py-block (&optional decorators)
  "When called interactively, mark Block at point.

From a programm, return source of Block at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "block" (or decorators py-mark-decorators))
    (py--thing-at-point "block" (or decorators py-mark-decorators))))

(defun py-block-or-clause (&optional decorators)
  "When called interactively, mark Block-Or-Clause at point.

From a programm, return source of Block-Or-Clause at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "block-or-clause" (or decorators py-mark-decorators))
    (py--thing-at-point "block-or-clause" (or decorators py-mark-decorators))))

(defun py-buffer ()
  "When called interactively, mark Buffer at point.

From a programm, return source of Buffer at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "buffer")
    (py--thing-at-point "buffer")))

(defun py-class (&optional decorators)
  "When called interactively, mark Class at point.

From a programm, return source of Class at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "class" (or decorators py-mark-decorators))
    (py--thing-at-point "class" (or decorators py-mark-decorators))))

(defun py-clause ()
  "When called interactively, mark Clause at point.

From a programm, return source of Clause at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "clause")
    (py--thing-at-point "clause")))

(defun py-def (&optional decorators)
  "When called interactively, mark Def at point.

From a programm, return source of Def at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "def" (or decorators py-mark-decorators))
    (py--thing-at-point "def" (or decorators py-mark-decorators))))

(defun py-def-or-class (&optional decorators)
  "When called interactively, mark Def-Or-Class at point.

From a programm, return source of Def-Or-Class at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "def-or-class" (or decorators py-mark-decorators))
    (py--thing-at-point "def-or-class" (or decorators py-mark-decorators))))

(defun py-expression ()
  "When called interactively, mark Expression at point.

From a programm, return source of Expression at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "expression")
    (py--thing-at-point "expression")))

(defun py-indent ()
  "When called interactively, mark Indent at point.

From a programm, return source of Indent at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "indent")
    (py--thing-at-point "indent")))

(defun py-line ()
  "When called interactively, mark Line at point.

From a programm, return source of Line at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "line")
    (py--thing-at-point "line")))

(defun py-minor-block ()
  "When called interactively, mark Minor-Block at point.

From a programm, return source of Minor-Block at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "minor-block")
    (py--thing-at-point "minor-block")))

(defun py-paragraph ()
  "When called interactively, mark Paragraph at point.

From a programm, return source of Paragraph at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "paragraph")
    (py--thing-at-point "paragraph")))

(defun py-partial-expression ()
  "When called interactively, mark Partial-Expression at point.

From a programm, return source of Partial-Expression at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "partial-expression")
    (py--thing-at-point "partial-expression")))

(defun py-region ()
  "When called interactively, mark Region at point.

From a programm, return source of Region at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "region")
    (py--thing-at-point "region")))

(defun py-statement ()
  "When called interactively, mark Statement at point.

From a programm, return source of Statement at point, a string."
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "statement")
    (py--thing-at-point "statement")))

(defun py-top-level (&optional decorators)
  "When called interactively, mark Top-Level at point.

From a programm, return source of Top-Level at point, a string.

Optional arg DECORATORS: include decorators when called at def or class.
Also honors setting of ‘py-mark-decorators’"
  (interactive)
  (if (called-interactively-p (quote interactive))
      (py--mark-base "top-level" (or decorators py-mark-decorators))
    (py--thing-at-point "top-level" (or decorators py-mark-decorators))))

;; python-components-forms-code.el ends here
(provide (quote python-components-forms-code))
