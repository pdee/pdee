;;; python-components-booleans-beginning-forms.el --- booleans-beginning forms -*- lexical-binding: t; -*- 

;;This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;; Copyright (C) 2015-2016  Andreas Röhler

;; Author: Andreas Röhler <andreas.roehler@online.de>
;; Keywords: languages, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:

(defun py--beginning-of-comment-p ()
  "Returns position, if cursor is at the beginning of a `comment', nil otherwise. "
  (and (looking-at py-comment-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-line-p ()
  "Returns position, if cursor is at the beginning of a `line', nil otherwise. "
  (and (looking-at py-line-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-paragraph-p ()
  "Returns position, if cursor is at the beginning of a `paragraph', nil otherwise. "
  (and (looking-at py-paragraph-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-expression-p ()
  "Returns position, if cursor is at the beginning of a `expression', nil otherwise. "
  (and (looking-at py-expression-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-partial-expression-p ()
  "Returns position, if cursor is at the beginning of a `partial-expression', nil otherwise. "
  (and (looking-at py-partial-expression-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-section-p ()
  "Returns position, if cursor is at the beginning of a `section', nil otherwise. "
  (and (looking-at py-section-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-top-level-p ()
  "Returns position, if cursor is at the beginning of a `top-level', nil otherwise. "
  (and (looking-at py-top-level-re)
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-block-p ()
  "Returns position, if cursor is at the beginning of a `block', nil otherwise. "
  (and (looking-at py-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-block-or-clause-p ()
  "Returns position, if cursor is at the beginning of a `block-or-clause', nil otherwise. "
  (and (looking-at py-block-or-clause-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-class-p ()
  "Returns position, if cursor is at the beginning of a `class', nil otherwise. "
  (and (looking-at py-class-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-clause-p ()
  "Returns position, if cursor is at the beginning of a `clause', nil otherwise. "
  (and (looking-at py-clause-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-def-p ()
  "Returns position, if cursor is at the beginning of a `def', nil otherwise. "
  (and (looking-at py-def-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-def-or-class-p ()
  "Returns position, if cursor is at the beginning of a `def-or-class', nil otherwise. "
  (and (looking-at py-def-or-class-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-elif-block-p ()
  "Returns position, if cursor is at the beginning of a `elif-block', nil otherwise. "
  (and (looking-at py-elif-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-else-block-p ()
  "Returns position, if cursor is at the beginning of a `else-block', nil otherwise. "
  (and (looking-at py-else-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-except-block-p ()
  "Returns position, if cursor is at the beginning of a `except-block', nil otherwise. "
  (and (looking-at py-except-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-for-block-p ()
  "Returns position, if cursor is at the beginning of a `for-block', nil otherwise. "
  (and (looking-at py-for-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-if-block-p ()
  "Returns position, if cursor is at the beginning of a `if-block', nil otherwise. "
  (and (looking-at py-if-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-indent-p ()
  "Returns position, if cursor is at the beginning of a `indent', nil otherwise. "
  (interactive) 
  (and (looking-at py-indent-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-minor-block-p ()
  "Returns position, if cursor is at the beginning of a `minor-block', nil otherwise. "
  (and (looking-at py-minor-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-statement-p ()
  "Returns position, if cursor is at the beginning of a `statement', nil otherwise. "
  (and (looking-at py-statement-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-try-block-p ()
  "Returns position, if cursor is at the beginning of a `try-block', nil otherwise. "
  (and (looking-at py-try-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (eq (current-column)(current-indentation))
       (point)))

(defun py--beginning-of-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `block', nil otherwise. "
  (and (bolp)
       (looking-at py-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-block-or-clause-bol-p ()
  "Returns position, if cursor is at the beginning of a `block-or-clause', nil otherwise. "
  (and (bolp)
       (looking-at py-block-or-clause-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-class-bol-p ()
  "Returns position, if cursor is at the beginning of a `class', nil otherwise. "
  (and (bolp)
       (looking-at py-class-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-clause-bol-p ()
  "Returns position, if cursor is at the beginning of a `clause', nil otherwise. "
  (and (bolp)
       (looking-at py-clause-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-def-bol-p ()
  "Returns position, if cursor is at the beginning of a `def', nil otherwise. "
  (and (bolp)
       (looking-at py-def-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-def-or-class-bol-p ()
  "Returns position, if cursor is at the beginning of a `def-or-class', nil otherwise. "
  (and (bolp)
       (looking-at py-def-or-class-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-elif-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `elif-block', nil otherwise. "
  (and (bolp)
       (looking-at py-elif-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-else-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `else-block', nil otherwise. "
  (and (bolp)
       (looking-at py-else-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-except-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `except-block', nil otherwise. "
  (and (bolp)
       (looking-at py-except-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-for-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `for-block', nil otherwise. "
  (and (bolp)
       (looking-at py-for-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-if-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `if-block', nil otherwise. "
  (and (bolp)
       (looking-at py-if-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-indent-bol-p ()
  "Returns position, if cursor is at the beginning of a `indent', nil otherwise. "
  (and (bolp)
       (looking-at py-indent-re)
       (looking-back "^[ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-minor-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `minor-block', nil otherwise. "
  (and (bolp)
       (looking-at py-minor-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-statement-bol-p ()
  "Returns position, if cursor is at the beginning of a `statement', nil otherwise. "
  (and (bolp)
       (looking-at py-statement-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(defun py--beginning-of-try-block-bol-p ()
  "Returns position, if cursor is at the beginning of a `try-block', nil otherwise. "
  (and (bolp)
       (looking-at py-try-block-re)
       (looking-back "[^ \t]*" (line-beginning-position))
       (not (nth 8 (parse-partial-sexp (point-min) (point))))
       (point)))

(provide 'python-components-booleans-beginning-forms)
;; python-components-booleans-beginning-forms.el ends here
