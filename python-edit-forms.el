;;; python-components-edit-forms.el -- Go to the end of forms

;; Copyright (C) 2011-2014  Andreas Roehler
;; Author: Andreas Roehler <andreas.roehler@online.de>
;; Keywords: languages, convenience

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:


(defun py-mark-block ()
  "Mark block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "block"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-block ()
  "Mark block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "block")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-block ()
  "Delete block  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "block")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-block ()
  "Delete block  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "block")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-clause ()
  "Mark clause at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "clause"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-clause ()
  "Mark clause at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "clause")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-clause ()
  "Delete clause  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "clause")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-clause ()
  "Delete clause  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "clause")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-block-or-clause ()
  "Mark block-or-clause at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "block-or-clause"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-block-or-clause ()
  "Mark block-or-clause at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "block-or-clause")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-block-or-clause ()
  "Delete block-or-clause  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "block-or-clause")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-block-or-clause ()
  "Delete block-or-clause  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "block-or-clause")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-def ()
  "Mark def at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "def"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-def ()
  "Mark def at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "def")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-def ()
  "Delete def  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "def")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-def ()
  "Delete def  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "def")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-class ()
  "Mark class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "class"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-class ()
  "Mark class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "class")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-class ()
  "Delete class  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "class")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-class ()
  "Delete class  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "class")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-def-or-class ()
  "Mark def-or-class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "def-or-class"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-def-or-class ()
  "Mark def-or-class at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "def-or-class")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-def-or-class ()
  "Delete def-or-class  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "def-or-class")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-def-or-class ()
  "Delete def-or-class  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "def-or-class")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-if-block ()
  "Mark if-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "if-block"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-if-block ()
  "Mark if-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "if-block")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-if-block ()
  "Delete if-block  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "if-block")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-if-block ()
  "Delete if-block  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "if-block")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-try-block ()
  "Mark try-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "try-block"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-try-block ()
  "Mark try-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "try-block")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-try-block ()
  "Delete try-block  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "try-block")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-try-block ()
  "Delete try-block  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "try-block")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-minor-block ()
  "Mark minor-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "minor-block"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-minor-block ()
  "Mark minor-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "minor-block")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-minor-block ()
  "Delete minor-block  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "minor-block")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-minor-block ()
  "Delete minor-block  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "minor-block")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-for-block ()
  "Mark for-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "for-block"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-for-block ()
  "Mark for-block at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "for-block")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-for-block ()
  "Delete for-block  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "for-block")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-for-block ()
  "Delete for-block  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "for-block")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-top-level ()
  "Mark top-level at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "top-level"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-top-level ()
  "Mark top-level at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "top-level")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-top-level ()
  "Delete top-level  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "top-level")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-top-level ()
  "Delete top-level  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "top-level")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-statement ()
  "Mark statement at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "statement"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-statement ()
  "Mark statement at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "statement")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-statement ()
  "Delete statement  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "statement")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-statement ()
  "Delete statement  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "statement")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-expression ()
  "Mark expression at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "expression"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-expression ()
  "Mark expression at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "expression")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-delete-expression ()
  "Delete expression  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "expression")))
    (delete-region (car erg) (cdr erg))))

(defun py-mark-partial-expression ()
  "Mark partial-expression at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let (erg)
    (setq erg (py-mark-base "partial-expression"))
    (exchange-point-and-mark)
    (when (and py-verbose-p (interactive-p)) (message "%s" erg))
    erg))

(defun py-copy-partial-expression ()
  "Mark partial-expression at point.

Returns beginning and end positions of marked area, a cons. "
  (interactive)
  (let ((erg (py-mark-base "partial-expression")))
    (kill-new (buffer-substring-no-properties (car erg) (cdr erg)))))

(defun py-kill-partial-expression ()
  "Delete partial-expression  at point.

Stores data in kill ring. Might be yanked back using `C-y'. "
  (interactive "*")
  (let ((erg (py-mark-base "partial-expression")))
    (kill-region (car erg) (cdr erg))))

(defun py-delete-partial-expression ()
  "Delete partial-expression  at point.

Don't store data in kill ring. "
  (interactive "*")
  (let ((erg (py-mark-base "partial-expression")))
    (delete-region (car erg) (cdr erg))))

;; python-edit-forms.el ends here
(provide 'python-edit-forms)
