;;; python-components-down.el -- Searching downwards in buffer -*- lexical-binding: t; -*-

;; URL: https://gitlab.com/python-mode-devs
;; Keywords: languages

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is generated by function from python-mode-utils.el - see in
;; directory devel. Edits here might not be persistent.

;;; Code:

(defun py-down-block (&optional indent)
  "Go to the beginning of next block downwards in buffer according to INDENT.

Return position if block found, nil otherwise."
  (interactive)
  (py-down-base 'py-block-re indent))

(defun py-down-class (&optional indent)
  "Go to the beginning of next class downwards in buffer according to INDENT.

Return position if class found, nil otherwise."
  (interactive)
  (py-down-base 'py-class-re indent))

(defun py-down-clause (&optional indent)
  "Go to the beginning of next clause downwards in buffer according to INDENT.

Return position if clause found, nil otherwise."
  (interactive)
  (py-down-base 'py-clause-re indent))

(defun py-down-block-or-clause (&optional indent)
  "Go to the beginning of next block-or-clause downwards in buffer according to INDENT.

Return position if block-or-clause found, nil otherwise."
  (interactive)
  (py-down-base 'py-block-or-clause-re indent))

(defun py-down-def (&optional indent)
  "Go to the beginning of next def downwards in buffer according to INDENT.

Return position if def found, nil otherwise."
  (interactive)
  (py-down-base 'py-def-re indent))

(defun py-down-def-or-class (&optional indent)
  "Go to the beginning of next def-or-class downwards in buffer according to INDENT.

Return position if def-or-class found, nil otherwise."
  (interactive)
  (py-down-base 'py-def-or-class-re indent))

(defun py-down-minor-block (&optional indent)
  "Go to the beginning of next minor-block downwards in buffer according to INDENT.

Return position if minor-block found, nil otherwise."
  (interactive)
  (py-down-base 'py-minor-block-re indent))

(defun py-down-block-bol (&optional indent)
  "Go to the beginning of next block below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if block found, nil otherwise "
  (interactive)
  (py-down-base 'py-block-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-class-bol (&optional indent)
  "Go to the beginning of next class below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if class found, nil otherwise "
  (interactive)
  (py-down-base 'py-class-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-clause-bol (&optional indent)
  "Go to the beginning of next clause below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if clause found, nil otherwise "
  (interactive)
  (py-down-base 'py-clause-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-block-or-clause-bol (&optional indent)
  "Go to the beginning of next block-or-clause below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if block-or-clause found, nil otherwise "
  (interactive)
  (py-down-base 'py-block-or-clause-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-def-bol (&optional indent)
  "Go to the beginning of next def below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if def found, nil otherwise "
  (interactive)
  (py-down-base 'py-def-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-def-or-class-bol (&optional indent)
  "Go to the beginning of next def-or-class below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if def-or-class found, nil otherwise "
  (interactive)
  (py-down-base 'py-def-or-class-re indent t)
  (progn (beginning-of-line)(point)))

(defun py-down-minor-block-bol (&optional indent)
  "Go to the beginning of next minor-block below in buffer according to INDENT.

Go to beginning of line
Optional INDENT: honor indentation
Return position if minor-block found, nil otherwise "
  (interactive)
  (py-down-base 'py-minor-block-re indent t)
  (progn (beginning-of-line)(point)))

;; python-components-down.el ends here
(provide 'python-components-down)
